name: Build and Deploy Haiyo Production

on:
  push:
    branches:
      - production

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Verify secrets
        run: |
          echo "Docker Username: ${DOCKER_USERNAME:0:2}... (truncated)"
          echo "App Port: ${APP_PORT:0:2}... (truncated)"
          echo "App Env: ${APP_ENV:0:2}... (truncated)"
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          APP_PORT: ${{ secrets.APP_PORT }}
          APP_ENV: ${{ secrets.APP_ENV }}

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin" # Specify the Java distribution
          java-package: "jdk"
          check-latest: false
          server-id: github
          server-username: ${{ secrets.GITHUB_ACTOR }}
          server-password: ${{ secrets.GITHUB_TOKEN }}
          overwrite-settings: true

      - name: Create deployment application.properties file
        run: |
          mkdir -p src/main/resources  # Ensure the directory exists
          echo "spring.data.mongodb.uri=${{ secrets.MONGO_URI }}" >> src/main/resources/application-${{ secrets.APP_ENV }}.properties
          echo "server.port=${{ secrets.APP_PORT }}" >> src/main/resources/application-${{ secrets.APP_ENV }}.properties

      - name: Build Application JAR
        run: ./mvnw clean package

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: docker build --build-arg PORT=${{ secrets.APP_PORT }} -t ${{ secrets.DOCKER_IMAGE_NAME }} .

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_IMAGE_NAME }}

      - name: SSH into Server and Deploy
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            if ! command -v docker &> /dev/null; then
              echo "Docker is not installed. Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker $USER
              echo "Docker installed successfully."
            fi

            # Log in to Docker Hub
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

            # Stop and remove the existing container if it exists
            if [ "$(docker ps -aq -f name=${{ secrets.CONTAINER_NAME }})" ]; then
              docker stop ${{ secrets.CONTAINER_NAME }} || true
              docker rm ${{ secrets.CONTAINER_NAME }}
            fi

            # Pull the latest Docker image
            docker pull $${{ secrets.DOCKER_IMAGE_NAME }}

            # Run the Docker container with restart policy
            docker run -d --restart=always -p ${{ secrets.APP_PORT }}:${{ secrets.APP_PORT }} --name ${{ secrets.CONTAINER_NAME }} ${{ secrets.DOCKER_IMAGE_NAME }}

            # Logging out of docker
            docker logout
